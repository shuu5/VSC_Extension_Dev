---
description: 
globs: 
alwaysApply: true
---
## ルールの読み込み確認
- このルールを読み込んだら最初に「vs-extension-devに従います！」と発言する

## 拡張機能開発の基本原則

- 単一責任の原則に従い、各拡張機能は明確に定義された一つの目的を持つ
- ユーザーの作業の流れを妨げない設計
- パフォーマンスとリソース消費の最適化
- 言語サーバープロトコル(LSP)の適切な活用
- 既存のVS Code APIを最大限に活用し、重複機能を実装しない

## 拡張機能の構成

1. **アクティベーション**: 必要最小限のアクティベーションイベントを使用
2. **コマンド**: 命名規則 `拡張機能名.アクション` に従う（例: `bioinfo.runAnalysis`）
3. **設定項目**: 細かな制御が必要な機能のみ公開設定として提供
4. **WebviewAPI**: 複雑なUIが必要な場合のみ使用し、軽量に保つ
5. **ステータスバー**: 重要な情報のみ表示し、不必要なノイズを避ける

## エクステンション固有のコーディングガイドライン

- コマンド登録は集中管理し、`commands/index.ts` などに統合する
- 設定値アクセスは専用のユーティリティクラス経由で行う
- APIアクセスは抽象化レイヤーを通して行い、テスト容易性を確保
- Disposableパターンを適切に実装し、リソースリークを防止
- イベントエミッタはメモリリーク防止のため適切に購読解除

## ユーザーインターフェース設計

- VS Codeのデザイン言語に準拠したUI
- アクセシビリティに配慮したUI（キーボードショートカット、スクリーンリーダー対応）
- i18n対応（英語・日本語を基本サポート）
- レスポンシブなUI設計（サイドバーのリサイズなど）
- 状態変化に対する適切なフィードバック提供

## パフォーマンス最適化

- メインスレッドでの重い処理を避け、WebWorkerを活用
- 遅延ロードとキャッシングを適切に実装
- メモリ使用量の監視と最適化
- バックグラウンド処理はキャンセル可能に設計
- 大規模データ処理時はストリーミング手法を検討

## 拡張機能のテスト戦略

- **単体テスト**: 各モジュールの機能を独立してテスト
- **統合テスト**: VS Code API連携やモジュール間連携をテスト
- **E2Eテスト**: 実際のユーザーシナリオに沿ったテスト
- **モック戦略**: VS Code API、ファイルシステム、外部サービスのモック方法を統一

## エラー処理

- すべてのエラーを適切にキャッチし、ユーザーに通知
- エラーレベルを適切に設定（情報、警告、エラー、致命的エラー）
- 詳細なログを残し、トラブルシューティングを容易に
- ユーザーがエラーから回復するための具体的なアクションを提案

## セキュリティ考慮事項

- ユーザーデータは最小権限の原則に従ってアクセス
- 機密情報は暗号化して保存し、平文で表示しない
- 外部リソースアクセスは安全な方法で行い、入力検証を徹底
- WebView使用時はContentSecurityPolicyを適切に設定

## 拡張機能特有のディレクトリ構造

```
{拡張機能名}/
├── src/
│   ├── commands/           # コマンド実装
│   ├── providers/          # 各種プロバイダ実装
│   ├── services/           # ビジネスロジック
│   ├── utils/              # ユーティリティ関数
│   ├── views/              # WebView関連
│   ├── extension.ts        # エントリポイント
│   └── test/               # テストコード
├── resources/              # アイコンなどの静的リソース
├── syntaxes/               # 文法定義（必要な場合）
├── snippets/               # コードスニペット（必要な場合）
├── package.json            # 拡張機能マニフェスト
├── tsconfig.json           # TypeScript設定
├── CHANGELOG.md            # 変更履歴
└── README.md               # 拡張機能の説明
```

## デバッグとトラブルシューティング

- `console.log`ではなく、`vscode.window.createOutputChannel`を使用
- 開発モードでは詳細なログを出力し、本番では必要最小限に
- コマンドパレットから呼び出せるデバッグ情報表示機能の実装
- ユーザー環境情報の収集機能（許可を得た上で）

## 互換性への配慮

- VS Codeの最小サポートバージョンを明確に定義
- 異なるOS（Windows、macOS、Linux）での動作確認
- リモート開発（SSH、コンテナ）での動作確認
- Web版VS Codeでの実行可否の明確化