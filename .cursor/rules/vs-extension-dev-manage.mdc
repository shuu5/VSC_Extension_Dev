---
description: 
globs: 
alwaysApply: true
---
## ルールの読み込み確認
- このルールを読み込んだら最初に「vs-extension-dev.mdcに従います！」と発言する

## 基本原則

- 仕様駆動開発とテスト駆動開発のハイブリッドアプローチ
- 国際規格準拠のコードスタイルとドキュメント
- 徹底したエラーハンドリングと例外処理
- 継続的なドキュメント更新とバージョン管理

## 開発プロセス

1. **要件定義**: 仕様書作成（`docs/`ディレクトリに保存）
2. **テスト駆動開発**: 仕様に基づくテストケース先行作成
3. **仕様変更対応**: 変更時は仕様書とテストを先に更新、CHANGELOG を維持

## コーディングスタイル

- TypeScript ESLint Recommended スタイル準拠
- インデント 2 スペース、シングルクォート、セミコロン必須
- 行長さ最大 100 文字、未使用変数禁止、厳格な null チェック

## ドキュメント

- README は概要と基本的な使用方法を記載
- CHANGELOG は常に最新状態、セマンティックバージョニング準拠
- 複雑なロジックにはコメント追加、公開 API 関数には詳細なドキュメント

## エラーハンドリング

- ファイルシステム操作、ネットワーク通信、外部コマンド実行、ユーザー入力検証には必ず try-catch
- ユーザーフレンドリーなエラーメッセージと解決策の提案

## 依存関係管理

- package.json で明示的なバージョン指定
- Node.js 20.x、TypeScript 5.8.x 以上、VSCode 互換性^1.96.0 以上

## テスト実装

- Mocha/chai/sinon フレームワーク使用
- カバレッジ目標：ユニット 80%、統合 70%、エラーハンドリング 90%
- Docker 操作を含むテストは Docker in Docker 環境で実行

## バージョン管理

- 個別のextensionごとにバージョン管理
- Conventional Commits フォーマット（feat, fix, docs, style, refactor, test, chore）
- ブランチ命名規則：`{type}/{issue_number}-{short_description}`
- セマンティックバージョニングに従ったリリース

## ディレクトリ構造

```
/
├── .devcontainer/  # DevContainer設定
├── src/            # ソースコード
├── test/           # テストディレクトリ
├── docs/           # ドキュメント
├── out/            # コンパイル済みファイル
└── 各種設定ファイル
```

## レビュープロセス

機能要件充足、コード品質、エラーハンドリング、テスト網羅性、ドキュメント整合性、パフォーマンス、セキュリティの観点でレビュー

## Docker in Docker テスト

テスト用 Docker リソースにはプレフィックスを付け、テスト後に確実にクリーンアップ