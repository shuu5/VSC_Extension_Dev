---
description: 
globs: 
alwaysApply: true
---
## ルールの読み込み確認
- このルールを読み込んだら最初に「vs-extension-dev-manage.mdcに従います！」と発言する

## 基本原則

- 仕様駆動開発とテスト駆動開発のハイブリッドアプローチ
- 国際規格準拠のコードスタイルとドキュメント
- 徹底したエラーハンドリングと例外処理
- 継続的なドキュメント更新とバージョン管理

## 開発プロセス

1. **要件定義**: 拡張機能の詳細な仕様書を作成（`docs/extensions/[拡張機能名]/spec.md`に保存）
2. **テスト駆動開発**: 仕様に基づくテストケースを先行して作成
3. **仕様変更対応**: 変更時は仕様書とテストを先に更新、CHANGELOGを維持

## コーディングスタイル

- TypeScript ESLint Recommendedスタイル準拠
- インデント2スペース、シングルクォート、セミコロン必須
- 行長さ最大100文字、未使用変数禁止、厳格なnullチェック
- 拡張機能共通のコーディングスタイルを維持するためにESLintとPrettierを使用

## ドキュメント

- 各拡張機能には独自のREADMEを作成し、概要と基本的な使用方法を記載
- CHANGELOGは常に最新状態に保ち、セマンティックバージョニングに準拠
- 複雑なロジックにはコメントを追加し、公開API関数には詳細なドキュメントを付与

## エラーハンドリング

- ファイルシステム操作、ネットワーク通信、外部コマンド実行、ユーザー入力検証には必ずtry-catch
- ユーザーフレンドリーなエラーメッセージと解決策の提案
- VSCodeのエラー報告機能を活用し、適切なコンテキスト情報を提供

## 依存関係管理

- package.jsonで明示的なバージョン指定
- Node.js 20.x、TypeScript 5.x以上、VSCode互換性^1.80.0以上
- 依存パッケージのセキュリティ脆弱性を定期的に監査

## テスト実装

- Mocha/chai/sinonフレームワーク使用
- カバレッジ目標：ユニット80%、統合70%、エラーハンドリング90%
- Docker操作を含むテストはDocker in Docker環境で実行

## バージョン管理

- 個別の拡張機能ごとにバージョン管理
- Conventional Commitsフォーマット（feat, fix, docs, style, refactor, test, chore）を使用
- ブランチ命名規則：`{type}/{拡張機能名}/{issue_number}-{short_description}`
- セマンティックバージョニングに従ったリリース（MAJOR.MINOR.PATCH）
  - MAJOR: 後方互換性のない変更
  - MINOR: 後方互換性のある機能追加
  - PATCH: 後方互換性のあるバグ修正

## ディレクトリ構造

```
/
├── .devcontainer/            # DevContainer設定
├── extensions_src/           # 拡張機能のソースコード
│   ├── {拡張機能A}/          # 個別の拡張機能ディレクトリ
│   │   ├── src/              # ソースコード
│   │   ├── test/             # テストコード
│   │   ├── package.json      # 拡張機能のマニフェスト
│   │   └── README.md         # 拡張機能の説明
│   ├── {拡張機能B}/          # 別の拡張機能
│   └── README.md             # ディレクトリの説明
├── docs/                     # プロジェクト全体のドキュメント
│   ├── environment.md        # 環境設定の説明 
│   ├── usage.md              # 使用方法の説明
│   └── developer-guide.md    # 開発者向けガイド
├── scripts/                  # ユーティリティスクリプト
├── Dockerfile                # 開発環境定義
├── docker-compose.yml        # Docker Compose設定
├── package.json              # プロジェクト設定
└── README.md                 # プロジェクト全体の説明
```

## レビュープロセス

1. **コード品質**: ESLintに違反していないか、TypeScriptの型定義が適切か
2. **機能要件充足**: 仕様に定義された機能要件を満たしているか
3. **エラーハンドリング**: 例外処理が適切に実装されているか
4. **テスト網羅性**: 十分なテストケースがあるか
5. **ドキュメント整合性**: 仕様書とコードの整合性があるか
6. **パフォーマンス**: リソース使用効率が高いか
7. **セキュリティ**: 脆弱性がないか
8. **国際化**: 多言語対応されているか（必要な場合）

## 拡張機能パッケージングとリリース

1. **バージョン更新**: package.jsonのバージョン番号を更新
2. **CHANGELOG更新**: 変更内容を記録
3. **ビルド**: `npm run compile`でコード変換
4. **テスト実行**: `npm test`ですべてのテストを実行
5. **パッケージング**: `vsce package`でVSIXファイル作成
6. **公開**: `vsce publish`でVisual Studio Marketplaceに公開（必要に応じて）

## Docker in Docker テスト

テスト用Dockerリソースにはプレフィックス`vsc-ext-test-`を付け、テスト後に確実にクリーンアップ 